version: 2.1

commands:
  restore_jib:
    description: "Restore Jib cache"
    steps:
      - restore_cache:
          name: Restoring Jib cache
          keys:
            - v1-jib-cache
  save_jib:
    description: "Save Jib cache"
    steps:
      - save_cache:
          name: Saving Jib cache
          paths:
            - build/jib-cache
          key: v1-jib-cache
  restore_gradle:
    description: "Restore Gradle dependencies from cache"
    steps:
      - restore_cache:
          name: Restoring Gradle dependencies
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
  save_gradle:
    description: "Save Gradle dependencies into cache"
    steps:
      - save_cache:
          name: Saving Gradle dependencies
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

executors:
  java:
    docker:
      - image: circleci/openjdk:8-jdk
    environment:
      SPRING_OUTPUT_ANSI_ENABLED: always
      JVM_OPTS: -Xmx3200m
      TERM: dumb

jobs:
  build:
    executor: java
    steps:
      - checkout
      - restore_gradle
      - run: 
          name: Compile source code
          command: ./gradlew classes
      - save_gradle
      - persist_to_workspace:
          root: build
          paths:
            - classes/
            - resources/
  test:
    executor: java
    steps:
      - checkout
      - attach_workspace:
          at: build
      - restore_gradle
      - run:
          name: Run tests
          command: |
            ./gradlew test -x classes
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: build/reports/tests/test
          destination: test-reports
  docker:
    executor: java
    steps:
      - checkout
      - restore_gradle
      - attach_workspace:
          at: build
      - restore_jib
      - run:
          name: Set image tag
          command: echo 'export IMAGE_TAG="$CIRCLE_PROJECT_USERNAME/$APP_NAME:built-with-jib"' >> $BASH_ENV
      - run:
          name: Create Docker image with Jib
          command: |
            echo $REGISTRY_PASS | docker login -u $REGISTRY_USER --password-stdin
            ./gradlew jib --image=$IMAGE_TAG
      - run:
          name: Image digest
          command: test -r build/jib-image.digest && echo "DIGEST:$(cat build/jib-image.digest)"
      - save_jib

workflows:
  version: 2
  build-test-and-docker:
    jobs:
      - build
      - test:
          requires:
            - build
      - docker:
          requires:
            - test
